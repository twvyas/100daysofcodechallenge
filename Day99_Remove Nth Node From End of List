Topic : Remove Nth Node From End of List
Problem :
Given the head of a linked list, remove the nth node from the end of the list and return its head.

Example 1:
Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]

Example 2:
Input: head = [1], n = 1
Output: []

Example 3:
Input: head = [1,2], n = 1
Output: [1]

Code :
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ArrayList<ListNode> arr = new ArrayList<>();
        while (head != null)
        {
            arr.add(head);
            head = head.next;
        }
        if (arr.size() == 0 || n > arr.size())
            return null;
        if (n == arr.size())
            return arr.get(0).next;
        arr.get(arr.size() - n - 1).next = arr.get(arr.size() - n).next;
        return arr.get(0);
    }
}

Case 1:
Input
head =
[1,2,3,4,5]
n =
2
Output
[1,2,3,5]
Expected
[1,2,3,5]

Case 2:
Input
head =
[1]
n =
1
Output
[]
Expected
[]

Case 3:
Input
head =
[1,2]
n =
1
Output
[1]
Expected
[1]
