Topic : Search a 2D Matrix

You are given an m x n integer matrix matrix with the following two properties:

Each row is sorted in non-decreasing order.
The first integer of each row is greater than the last integer of the previous row.
Given an integer target, return true if target is in matrix or false otherwise.

You must write a solution in O(log(m * n)) time complexity. 

Example 1:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

Example 2:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false

Code :
public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0) return false;
        int i = matrix.length -1;
        int j = matrix[0].length -1;
        if(target > matrix[i][j] || target < matrix[0][0] ) return false;

        int x = 0;
        int y = j;
        while(x <= i&& y>=0){
            if(target == matrix[x][y]) return true;
            else if( target < matrix[x][y]){
                y--;
            }else{
                x++;
            }
        }
        return false;
    }
}

Case 1:
Input
matrix =
[[1,3,5,7],[10,11,16,20],[23,30,34,60]]
target =
3
Output
true
Expected
true

Case 2:
Input
matrix =
[[1,3,5,7],[10,11,16,20],[23,30,34,60]]
target =
13
Output
false
Expected
false
